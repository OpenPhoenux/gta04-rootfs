# make an SD suitable for the Pyra
# run on host

[ "$SERVER" ] || export SERVER=http://download.goldelico.com/DragonFly/unstable
[ "$BOOT" ] || export BOOT="$SERVER"
if [ $(basename "$SERVER") == "unstable" ]
then # also use unstable kernel
[ "$KERNEL" ] || export KERNEL="$SERVER/../../gta04/unstable"
[ "$CONFIG" ] || export CONFIG="$SERVER/../../gta04/unstable"
else
[ "$KERNEL" ] || export KERNEL="$SERVER/../../gta04/latest"
[ "$CONFIG" ] || export CONFIG="$SERVER/../../gta04/latest"
fi
[ "$ROOTFS" ] || export ROOTFS=http://download.goldelico.com/gta04/debian/latest-lxde.tbz
[ "$DTBS" ] || export DTBS="omap5-uevm.dtb omap5-pyra.dtb"

#
# my eeePC has this configuration:
#
# /dev/sda:	internal flash (rootfs)
# /dev/sdb:	internal SD reader
# /dev/sdc: external SD reader
# /dev/sdd: external CF reader
# /dev/sde: external ? reader

[ "$DEV" ] || export DEV=/dev/sdc

mkdir -p /media/boot
mkdir -p /media/rootfs

if [ "$DEV" ]
then
umount ${DEV}1
umount ${DEV}2

if [ "${DEV}" = "/dev/sda" ]
then
	echo "can't overwrite /dev/sda"
	exit 1
elif [ -b "$DEV" ]
then
	## new based on http://omappedia.org/wiki/SD_Configuration#Script_to_partition.2Fformat_SDCards
	## updated based on http://www.sakoman.com/OMAP/a-script-for-partitioningformatting-a-bootable-sdmicrosd-card.html
	dd if=/dev/zero of=$DEV bs=1024 count=1024	# clear boot records
	[ "$SIZE" ] || SIZE=$(LC_ALL=C LANGUAGE=C fdisk -c -l $DEV | grep Disk | awk '{print $5}')	# make sure fdisk runs in default LANGUAGE
	echo DISK SIZE: $SIZE bytes
	CYLINDERS=$(expr $SIZE / 255 / 63 / 512)
	echo CYLINDERS: $CYLINDERS
	SECTORS2=$(expr $SIZE / 512 - 131072)	# number of sectors for second partition
	echo SECTORS1: 130944
	echo SECTORS2: $SECTORS2
	{
##		echo ,9,0x0C,*
##		echo ,,,-
		echo 128,130944,0x0C,*	# first partition: FAT
		echo 131072,$SECTORS2,,-	# second partiton: Linux
	} | sfdisk --force -D -uS -H 255 -S 63 -C $CYLINDERS $DEV
	/sbin/partprobe $DEV
	mkfs.vfat -F 32 -n "boot" ${DEV}1
	mke2fs -j -L "rootfs" ${DEV}2
else
	echo "not a block device: $DEV"
	exit 1
fi

umount ${DEV}1
umount ${DEV}2

fsck.vfat -y ${DEV}1
fsck.ext3 -y ${DEV}2

mount ${DEV}1 /media/boot || exit
mount ${DEV}2 /media/rootfs || exit
df

fi

# first partition (FAT)
( cd /media/boot
wget "$BOOT/MLO"	# must come first
wget "$BOOT/x-load.flash"
wget "$BOOT/u-boot.bin" && mv u-boot.bin u-boot.img
wget "$BOOT/u-boot.flash"
#wget "$BOOT/splash.rgb16z"
#wget "$BOOT/menu.rgb16z"
wget "$BOOT/boot.scr"
wget "$KERNEL/uImage"
wget "$KERNEL/bootargs.scr"
for i in $DTBS
do
	wget "$KERNEL/$i"
done
)
ls -l /media/boot

# second partition (EXT)
( cd /media/rootfs
wget "$ROOTFS" -O - | tar xvjf -
# wipe out old configs coming from the tbz
rm -rf boot/*
rm -rf lib/modules/kernel
rm -rf root
wget "$KERNEL/modules.tgz" -O - | tar xvzf -
wget "$CONFIG/config.tgz" -O - | tar xvzf -
)
ls -l /media/rootfs

sync
if [ "$DEV" ]
then
df
umount ${DEV}1
umount ${DEV}2
rmdir /media/boot
rmdir /media/rootfs
# check if PC did write SD card correctly
fsck -f ${DEV}1
fsck -f ${DEV}2
fi
